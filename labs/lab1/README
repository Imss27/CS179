CS 179: GPU Computing
Lab 1: Introduction to CUDA
Name:

================================================================================
Question 1: Common Errors (20 points)
================================================================================

--------------------------------------------------------------------------------
1.1
--------------------------------------------------------------------------------
Issue: 3 is the value of a, which is of type int*. 

Fix: 
void test1() {
    int *a;
    *a = 3;
    *a = *a + 2;
    printf("%d\n", *a);
}

--------------------------------------------------------------------------------
1.2
--------------------------------------------------------------------------------
Issue: b is not a pointer.

Fix:
int *b;

--------------------------------------------------------------------------------
1.3
--------------------------------------------------------------------------------
Issue: 1000 bytes is not 1000 integers

Fix:
int *a = (int *) malloc(1000 * sizeof(int));

--------------------------------------------------------------------------------
1.4
--------------------------------------------------------------------------------
Issue: There is no memory allocation for 1d array.

Fix:
int **a = (int **) malloc(3 * sizeof (int *));
for (int i = 0; i < 3; i++) {
    *(a + i) = (int *) malloc(100 * sizeof(int));
}
--------------------------------------------------------------------------------
1.5
--------------------------------------------------------------------------------
Issue: It is checking the address

Fix:
if (!(*a))
    printf("Value is 0\n");

================================================================================
Question 2: Parallelization (30 points)
================================================================================

--------------------------------------------------------------------------------
2.1
--------------------------------------------------------------------------------
y_1, there is no data dependency so it can be executed in parellel.

--------------------------------------------------------------------------------
2.2
--------------------------------------------------------------------------------
If c is close to 1, the term y[n - k]'s contribution to y[n] is negligible as k increases, so we can approximate to say y[n] = c * x[n] + (1-c) * x[n - 1] + (1-c)^2 * x[n - 2] and use this in parellel.

================================================================================
Question 3: Small-Kernel Convolution (50 points)
================================================================================
